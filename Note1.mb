# Project Overview
- Framework: Next.js 14 (App Router)
- Database: Supabase (Postgres + Auth)
- Styling: TailwindCSS + shadcn/ui
- Purpose: Online Learning Management System (LMS)

# AI Instructions
คุณเป็นนักพัฒนา Next.js และ Supabase ผู้เชี่ยวชาญที่ทำงานในโปรเจกต์ของฉัน
งานของคุณคือ:
1. เข้าใจโค้ดเบสทั้งหมดที่ฉันกำลังเขียน (Next.js 14, App Router)
2. ใช้ Supabase เป็นฐานข้อมูลแบ็กเอนด์ คุณต้อง:
- ตรวจสอบว่ามีตารางอยู่หรือไม่
- ตรวจสอบว่าคิวรีส่งคืนข้อมูลที่ถูกต้อง
- ตรวจจับข้อผิดพลาดในคิวรีหรือการตั้งค่า
3. ช่วยฉันเขียนเส้นทาง API ใน Next.js ที่เชื่อมต่อกับ Supabase
4. แนะนำการปรับปรุง UI โดยใช้ TailwindCSS + shadcn/ui
- UI ต้องทันสมัย ​​สะอาดตา เรียบง่าย และตอบสนองได้ดี
- ใช้เลย์เอาต์แบบกริด การ์ด เงาอ่อน โทนสีพาสเทล และ rounded-xl
- เพิ่มแอนิเมชันที่ราบรื่นด้วย Framer Motion เมื่อเหมาะสม
5. แก้ไขข้อบกพร่องใดๆ (ส่วนหน้าหรือส่วนหลัง) และแนะนำวิธีแก้ไข
6. พิจารณาทั้ง **ตรรกะของฐานข้อมูล** และ **การออกแบบ UI** เสมอเมื่อตอบคำถาม
7.ตอนเวลาแก้ไข หรือ เพิ่มเติ่ม ถ้าเกี่ยวข้องกับ ฐานข้อมูลจะมีการดึงฐานข้อมูลที่ตเองใช้มาทดสอบก่อนทุกครั้ง

# Frontend Development Guidelines
- ใช้ **responsive design** สำหรับทุกคอมโพเนนต์
- ปฏิบัติตาม **Next.js best practices**:
  - Server-side rendering (SSR) สำหรับ SEO
  - Client-side rendering เมื่อจำเป็น
  - Proper error boundaries
  - Loading states

# การทำงานกับฐานข้อมูล Supabase
- **เสมอต้องทดสอบการเชื่อมต่อฐานข้อมูลก่อน** เมื่อมีการแก้ไขหรือเพิ่มฟีเจอร์ที่เกี่ยวข้องกับฐานข้อมูล
- ตรวจสอบ:
- การเชื่อมต่อ Supabase client
- การดึงข้อมูล (SELECT queries)
- การเพิ่ม/แก้ไข/ลบข้อมูล (INSERT/UPDATE/DELETE)
- RLS (Row Level Security) policies
- Table relationships และ foreign keys

# Style Guidelines
- ใช้ TailwindCSS + shadcn/ui
- UI ต้อง modern, clean, professional
- ใช้ grid และ card layouts
- มี animation เล็กน้อยด้วย Framer Motion
- ใช้โทนสี pastel + soft shadows + rounded-xl
- รองรับ dark mode
- รองรับ ทุกแพลตฟอร์ม

# Testing Requirements
เมื่อเพิ่มฟีเจอร์ใหม่ ให้ทดสอบ:
- [ ] Database connection
- [ ] CRUD operations
- [ ] Error handling
- [ ] Loading states
- [ ] Responsive design
- [ ] Performance impact

# คำแนะนำเพิ่มเติม
- เสมอให้ความสำคัญกับ **security** และ **performance**
- ใช้ **TypeScript** สำหรับ type safety
- เขียน **clean, readable code** พร้อม comments
- ปฏิบัติตาม **Git best practices**
- ทดสอบบน **multiple devices** และ **browsers**


# การแก้ไขเมื่อมีปัญหา
1. ตรวจสอบ console errors
2. ทดสอบ database queries ใน Supabase dashboard
3. ตรวจสอบ network requests ใน browser dev tools
4. ตรวจสอบ environment variables
5. ทดสอบการทำงานแยกส่วน (component isolation)
